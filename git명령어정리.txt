1. git으로 관리할 경로까지 이동

2. 초기화(.git 폴더 생성됨 - 숨겨져 있음.) /한번만, 이제부터 관리할 거다~
git init
-> 볼 떄, ls -al (숨겨진 파일 확인)
.git 폴더 삭제 (rm -rf .git)

3. 브랜치 이름 기본값 변경하기 (master일 때)
git config --global init.defaultBranch main   (초기값 변경) 다음부터 적용
git branch -M main  (현재 브랜치명 수정)

4. git 상태 확인
git status

5. git으로 관리하는 파일로 추가 . ->현재경로에 있는 모든 것 / 저장할거다~~
git add .

6. commit (해당 시점을 저장)
git commit -m "커밋 메세지"

7. commit 이전에 계정정보 등록(--global 옵션은 해당 컴퓨터 전체에 저장)
git config --global user.name "Your Name"
git config --global.user.email you@example.com

git config list
git config --unset user.name
git config --global --unset user.name
git config --global --unset user.email

8. commit 정보 확인
git log

복사 /  붙여넣기
ctrl + insert 
ctrl + shift + insert

9. 과제
project5/test1 생성
git으로 관리
파일 생성은 알아서...최소 커밋의 수는 5번 이상 되도록
global 말구

-----------------------------------------------------------------------------

로컬 컴퓨터(코드 있음)와 github 사이트(비어있음) 연결
1. remote 정보 확인
git remote
git remote -v

2. remote 추가
git remote add 리모트 이름 github 리파지토리 주소
git remote add origin https://github.com/rnjswnghl/project5_work1.git

https://github.com/shimseonjo/project5_work1.git

3. remote 삭제
git remote rm 리모트이름
git remote rm origin

4. github 데이터 넣기
git push -u origin main
git push

-------------------------------------------------------------------------

clone 하기
- 코드가 없는 상태에서 전체 코드를 다운 받을 경우

# 현재 위치에 리파지토리 이름의 폴더를 만들고 파일을 가져온다
git clone <git-remote-url>

# <디렉토리> 위치에 파일을 가져온다
git clone <git-remote-url> <디렉토리>
git clone <git-remote-url> .


---------------------------------------------------
pull
- 코드가 있는 상태에서 변경된 코드를 받을 경우


---------------------------------------------------
파일 제외시키기
-gitignore


--------------------------------------------------------------------------
브렌치 만들기
- 브렌치 목록 확인
git branch

- 브렌치 생성
 git branch test01

 - 브렌치 이동
 git switch test01

 - 브렌치에서 소스 코딩, add, commit 작업 진행

 
-----------------------------------------------------------
브렌치 병합

가져오고 싶은 곳에서 작업!

-main 에서(main으로 코드 합류)
git merge 브렌치명 (main에서)
git add .
git commit -m "메세지"


브렌치 삭제
git branch -d 브렌치명

브렌치 복구
git branch 브렌치명 커밋번호


git log --graph
git log --graph --all
git log --graph --oneline
git log --graph --oneline --all

-----------------------------------------------------------

reset
git log
git reset --soft 커밋아이디(7자리정도)
git reset --mixed 커밋아이디
git reset --hard 커밋아이디

// 스테이지에 올리지 않은 파일 정리
git clean -f     

// github와 로컬 컴퓨터 내용이 일치하지 않을 경우 로컬 컴퓨터 내용으로 push 함.
git push -f           

옵션
–soft: 커밋을 취소하지만 스테이징 영역에는 그대로 남겨둡니다.
워킹 디렉토리의 변경 사항은 그대로 유지됩니다.
스테이징 영역의 변경 사항은 그대로 유지됩니다.
커밋 기록은 변경되지 않습니다.

–mixed: 커밋을 취소하고 스테이징 영역을 비웁니다.
워킹 디렉토리의 변경 사항은 그대로 유지됩니다.
스테이징 영역은 비워집니다.
커밋 기록은 변경되지 않습니다.

–hard: 커밋을 취소하고 스테이징 영역과 워킹 디렉토리를 모두 이전 상태로 되돌립니다.
워킹 디렉토리의 변경 사항은 모두 삭제됩니다.
스테이징 영역은 비워집니다.
커밋 기록은 변경됩니다.

----------------------------------------------------------------------------------------------------------

작업 디렉토리에서 변경사항 되돌리기: 수정, 추가, 삭제된 파일을 커밋 전 상태로 되돌립니다.
스테이징되지 않은 변경 사항: 스테이징(staging) 영역에 올리지 않은 변경 사항들이 초기화됩니다.

git restore . → 현재 디렉토리의 스테이징되지 않은 모든 변경 사항을 취소.
git restore --staged . → 스테이징된 파일들의 변경 사항도 초기화.
이 명령어를 사용할 때는 실수로 작업한 내용이 사라지지 않도록 주의








